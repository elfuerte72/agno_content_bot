import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
import os
from news_agent import NewsAgent
from content_formatter import ContentFormatter
from datetime import datetime
import hashlib

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
required_env_vars = ['TELEGRAM_BOT_TOKEN', 'OPENAI_API_KEY']
missing_vars = [var for var in required_env_vars if not os.getenv(var)]

if missing_vars:
    logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {missing_vars}")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å FSM
storage = MemoryStorage()
bot = Bot(token=os.getenv('TELEGRAM_BOT_TOKEN'))
dp = Dispatcher(storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class NewsStates(StatesGroup):
    waiting_for_approval = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤
try:
    news_agent = NewsAgent()
    content_formatter = ContentFormatter()
    logger.info("–ê–≥–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤: {e}")
    exit(1)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–æ—Å—Ç–æ–≤ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
pending_posts = {}

class TelegramNewsBot:
    def __init__(self):
        self.channel_id = os.getenv('TELEGRAM_CHANNEL_ID')
        
    async def generate_news_post(self, topic: str = "latest news"):
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –ø–æ—Å—Ç"""
        try:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —Ç–µ–º–µ: {topic}")
            
            # –®–∞–≥ 1: –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏
            raw_news = news_agent.get_latest_news(topic)
            logger.info("–ù–æ–≤–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            
            # –®–∞–≥ 2: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç
            formatted_post = content_formatter.format_news_post(raw_news)
            logger.info("–ö–æ–Ω—Ç–µ–Ω—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω")
            
            return formatted_post
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
    
    async def publish_to_channel(self, post_content: str):
        """–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ"""
        if not self.channel_id:
            return "‚ö†Ô∏è –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        
        try:
            await bot.send_message(
                chat_id=self.channel_id,
                text=post_content,
                parse_mode='Markdown'
            )
            logger.info(f"–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ {self.channel_id}")
            return "‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ!"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª–µ: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}"

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
telegram_news_bot = TelegramNewsBot()

def create_approval_keyboard(post_id: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ—Å—Ç–∞"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", 
                callback_data=f"approve_{post_id}"
            ),
            InlineKeyboardButton(
                text="üîÑ –î—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", 
                callback_data=f"regenerate_{post_id}"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", 
                callback_data=f"cancel_{post_id}"
            )
        ]
    ])
    return keyboard

def generate_post_id(user_id: int, topic: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –ø–æ—Å—Ç–∞"""
    content = f"{user_id}_{topic}_{datetime.now().isoformat()}"
    return hashlib.md5(content.encode()).hexdigest()[:8]

@dp.message(Command("start"))
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø —É–ª—É—á—à–µ–Ω–Ω—ã–π –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π.\n\n"
        "üì∞ **–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
        "‚Ä¢ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–æ–≤\n"
        "‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π\n"
        "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n\n"
        "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "üì∞ /news - –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏\n"
        "üîç /news <—Ç–µ–º–∞> - –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç–µ–º–µ\n"
        "‚öôÔ∏è /status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
        "‚ÑπÔ∏è /help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É",
        parse_mode='Markdown'
    )

@dp.message(Command("help"))
async def help_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await message.answer(
        "üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:**\n\n"
        "üîπ `/start` - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "üîπ `/news` - –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏\n"
        "üîπ `/news —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏` - –ù–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç–µ–º–µ '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'\n"
        "üîπ `/status` - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞\n\n"
        "üí° **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏—è:**\n"
        "1Ô∏è‚É£ –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥–æ–π `/news`\n"
        "2Ô∏è‚É£ –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç\n"
        "3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
        "   ‚Ä¢ ‚úÖ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é** - –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª–µ\n"
        "   ‚Ä¢ üîÑ **–î—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç** - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n"
        "   ‚Ä¢ ‚ùå **–û—Ç–º–µ–Ω–∏—Ç—å** - –æ—Ç–º–µ–Ω–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é\n\n"
        "üéØ **–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**\n"
        "‚Ä¢ `/news` - –æ–±—â–∏–µ –Ω–æ–≤–æ—Å—Ç–∏\n"
        "‚Ä¢ `/news –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã` - –Ω–æ–≤–æ—Å—Ç–∏ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö\n"
        "‚Ä¢ `/news —Å–ø–æ—Ä—Ç` - —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏",
        parse_mode='Markdown'
    )

@dp.message(Command("status"))
async def status_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    try:
        channel_status = "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω" if telegram_news_bot.channel_id else "‚ö†Ô∏è –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        
        await message.answer(
            f"üîß **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:**\n\n"
            f"ü§ñ –ê–≥–µ–Ω—Ç—ã: ‚úÖ –†–∞–±–æ—Ç–∞—é—Ç\n"
            f"üì∫ –ö–∞–Ω–∞–ª: {channel_status}\n"
            f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {len(pending_posts)}\n"
            f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}\n"
            f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y')}",
            parse_mode='Markdown'
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")

@dp.message(Command("news"))
async def news_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /news"""
    try:
        # –ò–∑–≤–ª–µ—á—å —Ç–µ–º—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        topic = message.text.replace("/news", "").strip()
        if not topic:
            topic = "–ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        loading_message = await message.answer("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –ø–æ—Å—Ç, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        
        # –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç
        post_content = await telegram_news_bot.generate_news_post(topic)
        
        # –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await loading_message.delete()
        
        # –°–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –ø–æ—Å—Ç–∞
        post_id = generate_post_id(message.from_user.id, topic)
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å—Ç –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        pending_posts[post_id] = {
            'content': post_content,
            'topic': topic,
            'user_id': message.from_user.id,
            'created_at': datetime.now()
        }
        
        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await message.answer(
            f"üì∞ **–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞:**\n"
            f"üè∑Ô∏è **–¢–µ–º–∞:** {topic}\n\n"
            f"---\n\n{post_content}\n\n---\n\n"
            f"‚ùì **–ß—Ç–æ –¥–µ–ª–∞–µ–º —Å —ç—Ç–∏–º –ø–æ—Å—Ç–æ–º?**",
            reply_markup=create_approval_keyboard(post_id),
            parse_mode='Markdown'
        )
        
        # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await state.set_state(NewsStates.waiting_for_approval)
        await state.update_data(post_id=post_id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /news: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@dp.callback_query(F.data.startswith("approve_"))
async def approve_post(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ—Å—Ç–∞"""
    post_id = callback.data.split("_", 1)[1]
    
    if post_id not in pending_posts:
        await callback.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω", show_alert=True)
        return
    
    post_data = pending_posts[post_id]
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    await callback.message.edit_text(
        f"üì§ –ü—É–±–ª–∏–∫—É—é –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ...\n\n"
        f"**–¢–µ–º–∞:** {post_data['topic']}",
        parse_mode='Markdown'
    )
    
    # –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª–µ
    result = await telegram_news_bot.publish_to_channel(post_data['content'])
    
    # –û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    await callback.message.edit_text(
        f"‚úÖ **–ü–æ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω!**\n\n"
        f"**–¢–µ–º–∞:** {post_data['topic']}\n"
        f"**–†–µ–∑—É–ª—å—Ç–∞—Ç:** {result}\n"
        f"**–í—Ä–µ–º—è:** {datetime.now().strftime('%H:%M:%S')}",
        parse_mode='Markdown'
    )
    
    # –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    del pending_posts[post_id]
    
    # –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    await callback.answer("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")

@dp.callback_query(F.data.startswith("regenerate_"))
async def regenerate_post(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞"""
    post_id = callback.data.split("_", 1)[1]
    
    if post_id not in pending_posts:
        await callback.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω", show_alert=True)
        return
    
    post_data = pending_posts[post_id]
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    await callback.message.edit_text(
        f"üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ—Å—Ç–∞...\n\n"
        f"**–¢–µ–º–∞:** {post_data['topic']}",
        parse_mode='Markdown'
    )
    
    # –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç
    new_content = await telegram_news_bot.generate_news_post(post_data['topic'])
    
    # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π ID –¥–ª—è –ø–æ—Å—Ç–∞
    new_post_id = generate_post_id(callback.from_user.id, post_data['topic'])
    
    # –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
    pending_posts[new_post_id] = {
        'content': new_content,
        'topic': post_data['topic'],
        'user_id': callback.from_user.id,
        'created_at': datetime.now()
    }
    
    # –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π –ø–æ—Å—Ç
    del pending_posts[post_id]
    
# –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç
    await callback.message.edit_text(
        f"üì∞ **–ù–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ—Å—Ç–∞:**\n"
        f"üè∑Ô∏è **–¢–µ–º–∞:** {post_data['topic']}\n\n"
        f"---\n\n{new_content}\n\n---\n\n"
        f"‚ùì **–ß—Ç–æ –¥–µ–ª–∞–µ–º —Å —ç—Ç–∏–º –ø–æ—Å—Ç–æ–º?**",
        reply_markup=create_approval_keyboard(new_post_id),
        parse_mode='Markdown'
    )
    
    await callback.answer("üîÑ –ù–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")

@dp.callback_query(F.data.startswith("cancel_"))
async def cancel_post(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –ø–æ—Å—Ç–∞"""
    post_id = callback.data.split("_", 1)[1]
    
    if post_id not in pending_posts:
        await callback.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω", show_alert=True)
        return
    
    post_data = pending_posts[post_id]
    
    # –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    del pending_posts[post_id]
    
    # –û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_text(
        f"‚ùå **–ü–æ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω**\n\n"
        f"**–¢–µ–º–∞:** {post_data['topic']}\n"
        f"**–í—Ä–µ–º—è:** {datetime.now().strftime('%H:%M:%S')}\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /news –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞.",
        parse_mode='Markdown'
    )
    
    # –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    await callback.answer("‚ùå –ü–æ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω")

@dp.message()
async def handle_text(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer(
        "ü§î –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    )

async def cleanup_old_posts():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø–æ—Å—Ç–æ–≤ (–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)"""
    current_time = datetime.now()
    posts_to_remove = []
    
    for post_id, post_data in pending_posts.items():
        # –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç—ã —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞
        if (current_time - post_data['created_at']).total_seconds() > 3600:
            posts_to_remove.append(post_id)
    
    for post_id in posts_to_remove:
        del pending_posts[post_id]
        logger.info(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –ø–æ—Å—Ç: {post_id}")

async def periodic_cleanup():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø–æ—Å—Ç–æ–≤"""
    while True:
        await asyncio.sleep(1800)  # –ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        await cleanup_old_posts()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ Telegram –±–æ—Ç–∞...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API
        bot_info = await bot.get_me()
        logger.info(f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.username}")
        
        # –ó–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏ –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(periodic_cleanup())
        
        # –ó–∞–ø—É—Å—Ç–∏—Ç—å polling
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")